//////////////////////////ARCHIVO DE RUTAS PRINCIPAL////////////////////////////////

/*
Este c칩digo define un m칩dulo de enrutamiento para una aplicaci칩n Node.js/Express, 
y su prop칩sito principal es manejar la l칩gica de la p치gina de inicio o dashboard, 
aplicando un control de acceso b치sico basado en la autenticaci칩n del usuario.
*/

const express = require('express');
const router = express.Router();
const cartController = require('../controllers/cartController');
const Producto = require('../models/productModel');

// ----------------- Rutas del Carrito -----------------

// Ruta para mostrar el cat치logo
router.get('/catalogo', async (req, res) => {
    try {
        const productos = await Producto.findAll({
            // Solo trae la informaci칩n necesaria para el cat치logo
            attributes: ['id', 'nombre', 'precio', 'imagen'] 
        });
        res.render('catalog/catalog', { 
            titulo: 'Cat치logo de Productos',
            productos: productos 
        });
    } catch (error) {
        console.error("Error al cargar el cat치logo:", error);
        res.render('catalogo/catalogo', { titulo: 'Cat치logo de Productos', productos: [] });
    }
});

// Ruta para ver el carrito
router.get('/carrito', cartController.viewCart);

// Ruta para agregar un producto (usualmente un POST desde el cat치logo)
router.post('/carrito/add', cartController.addToCart);

// Ruta para eliminar un producto (usualmente un POST o DELETE con un formulario)
router.post('/carrito/remove/:id', cartController.removeFromCart);

// 游뚿 RUTA DE CHECKOUT 游뚿
// Debe ser POST para procesar la transacci칩n
router.post('/checkout', cartController.checkout);

//------------------------------------------------------

// Carga las rutas de AUTENTICACI칍N/USUARIO
router.use('/', require('./userRoutes')); 

//  Carga las rutas de GESTI칍N DE CATEGOR칈AS 
router.use('/categorias', require('./categoryRoutes'));

// Carga las rutas de GESTI칍N DE PRODUCTOS 
router.use('/productos', require('./productRoutes')); 


// Ruta de prueba
// Indica que este c칩digo se ejecutar치 cuando se reciba una petici칩n GET a la ruta ra칤z (/)
// Es la funci칩n manejadora, que recibe el objeto de la petici칩n (req) 
// y el objeto de la respuesta (res).
router.get('/', (req, res) => {
    // Si hay un usuario logueado, redirige al men칰 principal, sino al login
    if (req.user) {
        // En el futuro, renderizar치s la vista del men칰 principal (ej: /catalogo)
        res.render('home', {
            layout: 'main',
            titulo: 'Bienvenido',
            nombreUsuario: req.user.nombre
        });
    } else {
        // Redirige al login si no est치 autenticado
        res.redirect('/login');
    }
});

// Aqu칤 ir치n las rutas del Usuario (Login/Registro)
// router.use('/', require('./usuarioRoutes')); 


//  hace que la instancia del router est칠 disponible para ser utilizada 
// en el archivo principal de la aplicaci칩n
module.exports = router;